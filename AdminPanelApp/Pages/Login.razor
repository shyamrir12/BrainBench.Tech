@page "/"
@using System.ComponentModel.DataAnnotations
@using AdminPanelApp.Data.LoginServices;
@using LoginModels;
@using System.Security.Cryptography;
@using System.Text;
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject ILoginProvider _loginProvider
@inject IToastService _toastService

<MudTabs Elevation="3" Rounded="true" Class="mt-3">
    <MudTabPanel Icon="@Icons.Material.Filled.Login" Text='"Login"'>
        <EditForm Model="@loginef" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                          
                            <MudTextField Label="Email" Class="mt-3"
                            @bind-Value="loginef.Mail" For="@(() => loginef.Mail)" />
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                            @bind-Value="loginef.Password" For="@(() => loginef.Password)" InputType="InputType.Password" />
                            
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">login</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>

    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Material.Filled.AppRegistration" Text='"Register"'>
       

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="First name" HelperText="Max. 8 characters"
                            @bind-Value="model.Username" For="@(() => model.Username)" />
                            <MudTextField Label="Email" Class="mt-3"
                            @bind-Value="model.Email" For="@(() => model.Email)" />
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                            @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                            <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                            @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
               
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>
      

    </MudTabPanel>
  @*   <MudTabPanel Icon="@Icons.Material.Filled.Password" Text='"Forgot Password"'></MudTabPanel> *@
    
</MudTabs>
@code {
    RegisterAccountForm model = new RegisterAccountForm();
    LoginEF loginef = new LoginEF();
    bool success;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {

            _navigationManager.NavigateTo("/profile", true);

        }


    }

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }


    public static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();

            for (int i = 0; i <= bytes.Length - 1; i++)
                builder.Append(bytes[i].ToString("x2"));

            return builder.ToString();
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        Random randcls = new Random();
        loginef.UserID = randcls.Next();
        loginef.Password = ComputeSha256Hash(loginef + loginef.Password);
        loginef.UserName = "admin";
        AuthenticationResponse authenticationResponse = await _loginProvider.AuthenticateJWT(loginef);
            if (authenticationResponse.Token != string.Empty)
            {
                await _localStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
                _navigationManager.NavigateTo("/profile", true);
               
            }
            else
            {
                _toastService.ShowError("Invalid username or password");
            }
        success = true;
        StateHasChanged();
    }
  }
