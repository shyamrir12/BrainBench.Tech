@page "/"
@using System.ComponentModel.DataAnnotations
@using AdminPanelApp.Data.LoginServices;
@using LoginModels;
@using System.Security.Cryptography;
@using System.Text;
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject ILoginProvider _loginProvider
@inject IToastService _toastService

<EditForm Model="@loginef" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardHeader>
                    
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Left"><b>User Login</b></MudText>
                       
                       @*  <MudImage Src="img/braibenchlogo.png" Width=300 Height=150 Alt="Login" Elevation="25" Class="rounded-lg" /> *@
                       

                     </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Success" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>

                    <MudTextField Label="User Name" Class="mt-3"
                    @bind-Value="loginef.UserName" For="@(() => loginef.UserName)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="loginef.Password" For="@(() => loginef.Password)" InputType="InputType.Password" />

                </MudCardContent>
                <MudCardActions>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto "  EndIcon="@Icons.Material.Filled.Login" FullWidth="true">login</MudButton>
                                           
                </MudCardActions>
                <MudCardActions>
              
                
                    <MudItem xs="6">
                        <MudText Typo="Typo.body2" Align="Align.Left">
                            <MudLink Href="/register">Create an account</MudLink>
                        </MudText>
                        
                    </MudItem>
                    <MudItem xs="6">
                       
                        <MudText Typo="Typo.body2" Align="Align.Right">
                            <MudLink Href="/forgotpassword">Forgot password?</MudLink>
                           @*  <MudLink  Href="/">Back to home</MudLink> *@
                        </MudText>
                    </MudItem>

                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
  
    LoginEF loginef = new LoginEF();
    bool success;

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    [CascadingParameter]
    public EventCallback<NotifyMainLayout> _notifyMainLayout { get; set; }
    NotifyMainLayout nml = new NotifyMainLayout();

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {

            _navigationManager.NavigateTo("/index", true);

        }


    }

    public static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();

            for (int i = 0; i <= bytes.Length - 1; i++)
                builder.Append(bytes[i].ToString("x2"));

            return builder.ToString();
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        Random randcls = new Random();
        loginef.UserID = randcls.Next();
        loginef.Password = ComputeSha256Hash(loginef.UserID + ComputeSha256Hash(loginef.Password));
        loginef.Mail = "test1234@gail.com";
        AuthenticationResponse authenticationResponse = await _loginProvider.AuthenticateJWT(loginef);
            if (authenticationResponse.Token != string.Empty)
            {
                await _localStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
            _navigationManager.NavigateTo("/index", true);
               
            }
            else
            {
                _toastService.ShowError("Invalid user-name or password");
            }
        success = true;
        StateHasChanged();
    }
  }
