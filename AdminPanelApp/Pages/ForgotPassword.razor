@page "/forgotpassword"

@using AdminPanelApp.Data.AzureHelperServices;

@using AdminPanelApp.Data.MailSMSServices;
@using AdminPanelApp.Data.RegisterServices;
@using AdminPanelModels;



@inject IMailSMSSubscriber _mailsmsSubscriber

@inject IToastService _toastService
@inject NavigationManager _navigationManager
@inject IConfiguration _configuration

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator />
    <MudGrid >
        <MudItem xs="12" sm="12" >
            <MudCard>
                <MudCardHeader>

                    <CardHeaderContent>


                        <MudText Typo="Typo.h5" Align="Align.Start"><b>Forgot Password</b></MudText>


                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Home" Color="Color.Success" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent >
                    <MudFocusTrap  DefaultFocus="DefaultFocus.FirstChild">

                        <MudTextField Label="Email Id" Class="mt-3" 
                        @bind-Value="model.EmailId" For="@(() => model.EmailId)" />
                    <MudPaper class="input-group-text" Style="padding:0;border:hidden" Elevation="0">
                        <MudTextField Label="OTP" HelperText="Enter OTP" Class=" mt-3" @bind-Value="model.otp" For="@(() => model.otp)" OnlyValidateIfDirty=true />
                        <MudButton Class="ml-auto" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send"
                                   Disabled="@(context.GetValidationMessages(context.Field(nameof(model.EmailId))).Any()||SendOTPShow)"
                                   OnClick="@(e => SendOTP(context))" Color="Color.Secondary">@sendotpbuttontext</MudButton>
                    </MudPaper>

                    <MudPaper class="input-group-text" Style="padding:0;border:hidden" Elevation="0">
                        <MudTextField Label="Captcha" HelperText="Sum of given numbers ?" @bind-Value="model.captcha" For="@(() => model.captcha)" OnlyValidateIfDirty=true />
                        <MudChip Icon="@Icons.Material.Filled.QuestionAnswer" Label="true" Color="Color.Primary">@CaptchaText</MudChip>
                    </MudPaper>
                    </MudFocusTrap>
                </MudCardContent>
                <MudCardActions>



                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Password" Color="Color.Primary" Class="ml-auto" Disabled="@(!context.IsModified() || !context.Validate())" FullWidth="true">Recover Password</MudButton>


                </MudCardActions>
                <MudCardActions>


                    <MudItem xs="6">
                        <MudText Typo="Typo.body2" Align="Align.Left">
                            <MudLink Href="/">Back to login</MudLink>

                        </MudText>

                    </MudItem>
                    <MudItem xs="6">

                        <MudText Typo="Typo.body2" Align="Align.Right">
                            <MudLink Href="/register">Create an account</MudLink>
                        </MudText>
                    </MudItem>

                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    MessageEF responce = new MessageEF();
    RecoverPassword model = new RecoverPassword();

    [CascadingParameter]
    public EventCallback<NotifyMainLayout> _notifyMainLayout { get; set; }
    NotifyMainLayout nml = new NotifyMainLayout();
    bool success;

    private string CaptchaText;
    private int CaptchaSolution;

    string sendotpbuttontext = "Send OTP";
    bool SendOTPShow = false;
    string otp = string.Empty;

  
 

    private async Task SendOTP(EditContext context)
    {
        if (!context.GetValidationMessages(context.Field(nameof(model.EmailId))).Any())
        {
            nml.SpinnerVisible = true;
            _notifyMainLayout.InvokeAsync(nml);
            SendOTPShow = true;
            otp = MyUtility.GenerateOTP(6);
            string templateid = _configuration.GetValue<string>("KeyList:OTPTemplate");

            // // For centralized SMS
            // SMS obj = new SMS();
            // DateTime currentDateTime = DateTime.Now;
            // string formattedDateTime = currentDateTime.ToString("dd-MMM-yyyy HH:mm tt");
            // obj.mobileNo = "9301789363";
            // obj.templateid = templateid;
            // obj.parameterlist = new List<string>() { model.otp };
            // var res1 = _mailsmsSubscriber.Main(obj);


            // For centralized Email
            CommonMail commonMail = new CommonMail();
            string Subject = _configuration.GetValue<string>("KeyList:OTPMailSubject");
            commonMail.TemplateID = templateid;
            commonMail.To = model.EmailId;
            commonMail.Subject = Subject;
            commonMail.ParameterList = new List<string>() { otp };
            responce = await _mailsmsSubscriber.SendCommonMail(commonMail);
            nml.SpinnerVisible = false;
            _notifyMainLayout.InvokeAsync(nml);
            if (responce.Satus == "success")
            {
                _toastService.ShowSuccess("OTP is successfully sanded to your Email ID!");
            }
            else
            {
                _toastService.ShowError("Please try again after some time!");

            }
           
            success = true;
            StateHasChanged();

            //disable button for  after successfully send OTP for next 30 second

            for (int i = 30; i >= 1; i--)
            {
                await Task.Delay(1000);

                sendotpbuttontext = "(" + i + ") Resend OTP";
                StateHasChanged();

                if (i == 1)
                {
                    SendOTPShow = false;
                    sendotpbuttontext = "Resend OTP";
                    StateHasChanged();
                    break;
                }
            }

        }
        else
        {
            _toastService.ShowError("!Please fill the form correctly");
        }
    }



    protected override void OnInitialized()
    {
        var captcharesponce = MyUtility.GenerateCaptcha();
        CaptchaSolution = captcharesponce.CaptchaSolution;
        CaptchaText = captcharesponce.CaptchaText;
        // resultListApplicationType = await _registerSubscriber.GetApplicationType();

        // if (resultListApplicationType.Status = true)
        // {
        //     ListApplicationType = resultListApplicationType.Data;
        // }
    }

  


    private async Task OnValidSubmit(EditContext context)
    {
        if (context.Validate())
        {

            if (Convert.ToInt32( model.captcha) == CaptchaSolution)
            {
               // CaptchaResult = "CAPTCHA correct!";
                
               
                nml.SpinnerVisible = true;
                _notifyMainLayout.InvokeAsync(nml);
               
                  await Task.Delay(5000);

                nml.SpinnerVisible = false;
                _notifyMainLayout.InvokeAsync(nml);
                success = true;
                StateHasChanged();
                // Model is valid, proceed with submission
                // Your logic here

               
            }
            else
            {
                _toastService.ShowError("CAPTCHA incorrect. Try again!");
                var captcharesponce = MyUtility.GenerateCaptcha();
                CaptchaSolution = captcharesponce.CaptchaSolution;
                CaptchaText = captcharesponce.CaptchaText;
            }
            
        }
        else
        {
            _toastService.ShowError("!Please fill the form correctly");
        }

     
    }



}
