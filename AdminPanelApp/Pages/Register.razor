@page "/register"
@using AdminPanelApp.Data.AzureHelperServices;
@using AdminPanelApp.Data.MailSMSServices;
@using AdminPanelApp.Data.RegisterServices;
@using AdminPanelModels;
@inject IJSRuntime JSRuntime
@inject IRegisterSubscriber _registerSubscriber
@inject IAzureFileSubscriber _azrfileSubscriber
@inject IMailSMSSubscriber _mailsmsSubscriber
@inject IConfiguration _configuration

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email Id" Class="mt-3"
                    @bind-Value="model.EmailId" For="@(() => model.EmailId)" />

                    <MudTextField Label="User name" HelperText="Max. 8 characters"
                    @bind-Value="model.username" For="@(() => model.username)" />
                 
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />

                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                    @bind-Value="model.PD_Reenterpwd" For="@(() => model.PD_Reenterpwd)" InputType="InputType.Password" />

                    <MudTextField Label="OrganizationName" HelperText="Organization Name" Class="mt-3"
                    @bind-Value="model.OrganizationName" For="@(() => model.OrganizationName)"  />


                    <MudSelect T="string" Label="Application Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Iid">
                        @foreach (var item in ListApplicationType)
                        {
                            <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>

                        }
                    </MudSelect>


                    <MudFileUpload T="IBrowserFile" Context="editformcontext"   FilesChanged="UploadFiles" >
                        <ButtonTemplate >
                            <MudFab HtmlTag="label"
                                    Color="Color.Secondary"
                                    Icon="@Icons.Material.Filled.Image"
                                    Label="Load picture"
                                    for="@editformcontext" />
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }


                    <MudTextField Label="otp" HelperText="enter otp" Class="mt-3"
                    @bind-Value="model.otp" For="@(() => model.otp)" />


                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    RegisterUser model = new RegisterUser();
    public IEnumerable<ListItems> ListApplicationType = new List<ListItems>();

    public Result<List<ListItems>> resultListApplicationType = new Result<List<ListItems>>();
    bool success;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        model.userphoto = file;
        //TODO upload the files to the server
    }

    protected override async Task OnInitializedAsync()
    {
        resultListApplicationType = await _registerSubscriber.GetApplicationType();

        if (resultListApplicationType.Status = true)
        {
            ListApplicationType = resultListApplicationType.Data;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var folderpath = _configuration.GetValue<string>("KeyList:ProfilePhoto");

        if(model.userphoto!=null&&model.userphoto.Size>0)
        {
            if (!string.IsNullOrEmpty(model.userphoto.Name))
            {

                var buffers = new byte[model.userphoto.Size];
                await model.userphoto.OpenReadStream().ReadAsync(buffers);

                byte[] ImageBytes = buffers;

                string base64BinaryStr = Convert.ToBase64String(ImageBytes);
                string strName = DateTime.Now.Ticks.ToString() + "_" + Path.GetFileName(model.userphoto.Name);

                MyFileRequest myFileRequest = new MyFileRequest();
                myFileRequest.FileContenctBase64 = base64BinaryStr;
                myFileRequest.FileName = strName;
                myFileRequest.FolderName = folderpath;
                myFileRequest.FileNameWithPath=folderpath+"\\" + strName;
                MessageEF e = await _azrfileSubscriber.SaveFile(myFileRequest);
                 //create properti save in db
                //     obj.TP_File_PATH = "folderpath\\" + strName;
                //     obj.TP_FILE = strName;
                //file download
                // MyFileResult fr = await _azrfileSubscriber.DownloadFile(myFileRequest);
                // await JSRuntime.InvokeVoidAsync("downloadFile", fr.ContentType, fr.FileBase64, fr.FileName);


                    //For centralized SMS
               //      SMS obj = new SMS();
               //      DateTime currentDateTime = DateTime.Now;
               //      string formattedDateTime = currentDateTime.ToString("dd-MMM-yyyy HH:mm tt");
               //      string templateid = _configuration.GetValue<string>("KeyList:OTPTemplate");
               //                      obj.mobileNo = "9301789363";
               //                      obj.templateid = templateid;
               //                      obj.parameterlist = new List<string>() { model.otp};
               // var res1 = _mailsmsSubscriber.Main(obj);

                    //For centralized Email
                //     CommonMail commonMail = new CommonMail();
                //     string Subject = _configuration.GetValue<string>("KeyList:OTPMailSubject");
                //     commonMail.TemplateID = templateid;
                //                     commonMail.To = model.EmailId;
                //                     commonMail.Subject = Subject;
                // commonMail.ParameterList = new List<string>() { model.otp };
                // var res = _mailsmsSubscriber.SendCommonMail(commonMail);
               

            }

        }
        success = true;
        StateHasChanged();
    }
  


}
