@page "/register"
@using AdminPanelApp.Data.RegisterServices;
@using AdminPanelModels;
@inject IRegisterSubscriber _registerSubscriber

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name" HelperText="Max. 8 characters"
                    @bind-Value="model.username" For="@(() => model.username)" />
                    <MudTextField Label="User Name" Class="mt-3"
                    @bind-Value="model.EmailId" For="@(() => model.EmailId)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                    @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                    @bind-Value="model.PD_Reenterpwd" For="@(() => model.PD_Reenterpwd)" InputType="InputType.Password" />
                    <MudSelect T="string" Label="Application Type" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.Iid">
                        @foreach (var item in ListApplicationType)
                        {
                            <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>

                        }
                    </MudSelect>
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" bind-Files=model.userphoto For="@(() => model.userphoto)">
                        <ButtonTemplate Context="tableRowContext">
                            <MudFab HtmlTag="label"
                                    Color="Color.Secondary"
                                    Icon="@Icons.Material.Filled.Image"
                                    Label="Load picture"
                                    for="@tableRowContext.Id" />
                        </ButtonTemplate>
                    </MudFileUpload>
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in files)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                    @file.Name <code>@file.Size bytes</code>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {

    RegisterUser model = new RegisterUser();
    public IEnumerable<ListItems> ListApplicationType = new List<ListItems>();

    public Result<List<ListItems>> resultListApplicationType = new Result<List<ListItems>>();
    bool success;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        //TODO upload the files to the server
    }

    protected override async Task OnInitializedAsync()
    {
        resultListApplicationType = await _registerSubscriber.GetApplicationType();

        if (resultListApplicationType.Status = true)
        {
            ListApplicationType = resultListApplicationType.Data;
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {

        success = true;
        StateHasChanged();
    }


//      foreach (var formFile in TP_File_Copy)
//                         {
//                             if (formFile != null && formFile.Length > 0)
//                             {
//                                 if (!string.IsNullOrEmpty(formFile.FileName))
//                                 {
//                                     //Code to save file with Base64
//                                     string base64BinaryStr = Convert.ToBase64String(ReadFully(formFile.OpenReadStream()));
//     string strName = DateTime.Now.Ticks.ToString() + "_" + Path.GetFileName(formFile.FileName);
//     //save file in azure (Sunil DEshalahre 27-08-22)
//     System.Threading.Tasks.Task<MessageEF> e = azureFileOperation.SaveFile(new MyFileRequest() { FileContenctBase64 = base64BinaryStr, FileName = strName, FolderName = "OfflineTPFiles" }, configuration.GetSection("AzureAPIUrl").Value);

//     obj.TP_File_PATH = "OfflineTPFiles\\" + strName;
//                                     obj.TP_FILE = strName;

//                                 }
// }
//                         }


//     //For centralized SMS
//     SMS obj = new SMS();
//     DateTime currentDateTime = DateTime.Now;
//     string formattedDateTime = currentDateTime.ToString("dd-MMM-yyyy HH:mm tt");
//     string templateid = _configuration.GetSection("KeyList").GetSection("SMSKeys").GetValue<string>("OTPTemplate");
//     obj.mobileNo = objforgotPasswordModel.MOBILENO;
//                     obj.templateid = templateid;
//                     obj.parameterlist = new List<string>() { objOtPModel.OTP
//     };
//     var res1 = sMSModel.Main(obj);

//     //For centralized Email
//     CommonMail commonMail = new CommonMail();
//     string Subject = _configuration.GetSection("KeyList").GetSection("SMSKeys").GetValue<string>("OTPMailSubject");
//     commonMail.TemplateID = templateid;
//                     commonMail.To = objforgotPasswordModel.EMAILID;
//                     commonMail.Subject = Subject;
//                     commonMail.ParameterList = new List<string>() { objOtPModel.OTP
// };
// var res = mailModel.SendCommonMail(commonMail);
// if (res1.Satus.ToUpper() == "SUCCESS" || res.Satus.ToUpper() == "SUCCESS")
// {
//     messageEF.Satus = "success";
// }

}
