
@inject IToastService _toastService
@inject IAddUserSubscriber _adduser
@inject NavigationManager _navigationManager
<EditForm Model="@adduser" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Start"><b>Add User</b></MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
                        <MudSelect T="string" Label="User Role" AnchorOrigin="Origin.BottomCenter" @bind-Value="adduser.RoleId">
                            @foreach (var item in Roletype)
                            {
                                <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>

                            }
                        </MudSelect>
                        <MudTextField Label="Applicant Name" HelperText="Max. 8 characters"
                        @bind-Value="adduser.Name" For="@(() => adduser.Name)" />

                        <MudTextField Label="Mobile No" HelperText="Mobile No" Class="mt-3"
                        @bind-Value="adduser.Mobile_No" For="@(() => adduser.Mobile_No)" />

                        <MudTextField Label="Email Id" Class="mt-3"
                        @bind-Value="adduser.EmailId" For="@(() => adduser.EmailId)" />
                     
                       
                        <MudPaper class="input-group-text" Style="padding:0;border:hidden" Elevation="0">
                            <MudTextField Label="Captcha" HelperText="Sum of given numbers ?" @bind-Value="adduser.captcha" For="@(() => adduser.captcha)" OnlyValidateIfDirty=true />
                            <MudChip Icon="@Icons.Material.Filled.QuestionAnswer" Label="true" Color="Color.Primary">@CaptchaText</MudChip>
                        </MudPaper>

                    </MudFocusTrap>
                </MudCardContent>
                <MudCardActions>



                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Primary"
                               Class="ml-auto" Disabled="@(!context.IsModified() || !context.Validate())" FullWidth="true">Add User</MudButton>


                </MudCardActions>

            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string CaptchaText;
    private int CaptchaSolution;
    //3.declare parameter for the parent
    [Parameter]
    public AddUserModel adduserparam { get; set; }
    public AddUserModel adduser = new AddUserModel();
    public string buttonText = "Save";
    public int userid { get; set; }
    public IEnumerable<ListItems> Roletype { get; set; } = new List<ListItems> { new ListItems { Value = "", Text = "" } };

    //3. setting parent parameter to local variable
    protected override void OnParametersSet()
    {
       if( adduserparam.UserID!=null)
       {
        base.OnParametersSet();
        adduser = adduserparam;
            if (adduserparam.UserID > 0)
        {
            buttonText = "Update";
        }
        else
        {
            buttonText = "Save";
        }
        adduserparam = null;
        }
    }

    //4 for pass item to parent add event for updated or saved item
    [Parameter]
    public EventCallback<AddUserModel> OnUserUpdation { get; set; }


    private void OnValidSubmit()
    {
        if (adduser.UserID>0)
        {
            if (buttonText == "Save")
            {

                _toastService.ShowSuccess("Data Save");
            }
            else if (buttonText == "Update")
            {

                _toastService.ShowSuccess("Data Updated");
            }

        }

        //4 by invoking this method sending back updated or added user
        OnUserUpdation.InvokeAsync(adduser);
        // StateHasChanged();




    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var identity = authState.User.Identity as ClaimsIdentity;
        if (identity.IsAuthenticated)
        {
            var nameIdentifierClaim = identity?.FindFirst(ClaimTypes.NameIdentifier);
            userid = Convert.ToInt32(nameIdentifierClaim.Value);
            var rolelist = await _adduser.GetRole(new CommanRequest { UserID = userid });
            Roletype = rolelist.Data;
         
            var captcharesponce = MyUtility.GenerateCaptcha();
            CaptchaSolution = captcharesponce.CaptchaSolution;
            CaptchaText = captcharesponce.CaptchaText;


        }
        else
        {
            _navigationManager.NavigateTo("/", true);
        }

       
    }

}
