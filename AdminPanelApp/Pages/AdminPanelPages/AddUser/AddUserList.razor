
@foreach (var item in adduserlist)
{
    <div style="margin-bottom: 5px;">
        <MudCard>

            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">I</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@item.name</MudText>
                    <MudText Typo="Typo.body2">@item.email</MudText>
                    @* Browser window is @(_width)x@(_height)px *@
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
                        <MudStack>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(e => edituserevent(item))"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(e => deleteuserevent(item))"></MudIconButton>
                        </MudStack>
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>

        </MudCard>
    </div>


}

@code {

    //1 for pass item to parent add event for selected edit item
    [Parameter]
    public EventCallback<AddUserModel> OnUserSelection { get; set; }

    //6.declare parameter for the parent 
    [Parameter]
    public AddUserModel adduserparam { get; set; }

    private List<AddUserModel> adduserlist = new List<AddUserModel>
    {
        new  AddUserModel{name="Shyam",email="Shyam@gmail.com"},
        new  AddUserModel{name="umang",email="umang@gmail.com"},
        new  AddUserModel{name="Shyamn",email="Shyam@gmailn.com"},
        new  AddUserModel{name="umangl",email="umang@gmaill.com"}

    };

    //6. setting parent (added or edited item) parameter to list item 
    protected override void OnParametersSet()
    {
        base.OnParametersSet();


        if (adduserparam.designation == "Save")
        {
            adduserlist.Add(adduserparam);
        }


        StateHasChanged();
    }




    private void deleteuserevent(AddUserModel? aum)
    {
        adduserlist.Remove(aum);
        StateHasChanged();
    }

    private void edituserevent(AddUserModel? aum)
    {
        //1 by invoking this method inside edit event passing value to parent
        OnUserSelection.InvokeAsync(aum);
        StateHasChanged();
      
    }

   


  

   

}