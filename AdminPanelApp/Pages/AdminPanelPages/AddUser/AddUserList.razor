@using System.Security.Claims;

@inject IAddUserSubscriber _adduser
 <div style="overflow-y: auto; max-height: 100px;">
<MudTextField @bind-Value="searchText" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="HandleSearch" AdornmentAriaLabel="Search">

</MudTextField>

<Virtualize ItemsProvider="loadOnlyVisibleItems" Context="singleuser" @ref="virtualizeComponent">
    <ItemContent>
        <MudCard style="margin-bottom: 5px;">

            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">I</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">@singleuser.name</MudText>
                    <MudText Typo="Typo.body2">@singleuser.EmailId</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft">
                        <MudStack>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(e => edituserevent(singleuser))"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(e => deleteuserevent(singleuser))"></MudIconButton>
                        </MudStack>
                    </MudMenu>
                </CardHeaderActions>
            </MudCardHeader>

        </MudCard>
    </ItemContent>
    <Placeholder>
        <MudCard style="margin-bottom: 5px;">

            <MudCardHeader>
                Loading...
            </MudCardHeader>
        </MudCard>
    </Placeholder>


</Virtualize>
</div>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    //1 for pass item to parent add event for selected edit item
    [Parameter]
    public EventCallback<AddUserModel> OnUserSelection { get; set; }

    //6.declare parameter for the parent
    [Parameter]
    public AddUserModel adduserparam { get; set; }

    public Virtualize<AddUserModel>? virtualizeComponent;
    List<AddUserModel> adduserlist = new List<AddUserModel>();
    public string searchText;
    int totalrows =3;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var identity = user.Identity as ClaimsIdentity;

            // Find the NameIdentifier claim
            var nameIdentifierClaim = identity?.FindFirst(ClaimTypes.NameIdentifier);

            // Get the value of the NameIdentifier claim
            CommanRequest request = new CommanRequest();
            request.UserID = Convert.ToInt32(nameIdentifierClaim?.Value);

            // var userlist =await _adduser.GetUserList(request);
            //adduserlist = userlist.Data;
            // totalrows = Convert.ToInt32(userlist.Message[userlist.Message.Count - 1]);
        }
    }

    private void HandleSearch()
    {
        virtualizeComponent?.RefreshDataAsync();
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<AddUserModel>> loadOnlyVisibleItems(ItemsProviderRequest itemsProviderRequest)
    {
        var authState = await authenticationState;
        var identity = authState.User.Identity as ClaimsIdentity;
        var nameIdentifierClaim = identity?.FindFirst(ClaimTypes.NameIdentifier);

        int PageIndex  = itemsProviderRequest.StartIndex;
        int PageSize = itemsProviderRequest.Count;

        CommanRequest request = new CommanRequest();
        List<AddUserModel> RengList = new List<AddUserModel>();
        request.Filter = searchText;
        request.PageSize = PageSize;
        request.PageIndex = PageIndex;
        request.UserID = Convert.ToInt32(nameIdentifierClaim?.Value);

        var userlist =await _adduser.GetUserList(request);

        RengList = userlist.Data;
        totalrows = Convert.ToInt32(userlist.Message[userlist.Message.Count-1]);


        if (String.IsNullOrEmpty(searchText))
        {
            RengList = adduserlist.GetRange(itemsProviderRequest.StartIndex, itemsProviderRequest.Count);
        }
        else
        {
            RengList = adduserlist.Where(item => item.name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

        }

        //await Task.Delay(1000);
        return new ItemsProviderResult<AddUserModel>(RengList, totalrows);
    }

    //6. setting parent (added or edited item) parameter to list item
    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        //call API to reload the data from data base

        if (adduserparam.designation == "Save")
        {
           // adduserlist.Add(adduserparam);
        }


        //StateHasChanged();
    }




    private void deleteuserevent(AddUserModel? aum)
    {
        //adduserlist.Remove(aum);
        // StateHasChanged();
    }

    private void edituserevent(AddUserModel? aum)
    {
        //1 by invoking this method inside edit event passing value to parent
        OnUserSelection.InvokeAsync(aum);
        //StateHasChanged();

    }

}