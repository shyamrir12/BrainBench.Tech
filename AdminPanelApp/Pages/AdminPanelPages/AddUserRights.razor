@page "/adduserrights"
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject IAdduser_rightsSubscriber _adduser_rights
<MudPaper Class="pa-4 ma-2">
    <MudAutocomplete T="@ListItems" Label="Search User" @bind-Value="selecteduser" SearchFunc="@LodefilterList" ToStringFunc="@(e=> e==null?null : $"{e.Text}")" ShowProgressIndicator="true" ProgressIndicatorColor="Color.Default" />

<MudPaper  Height="380px" Class="pa-4 ma-2 overflow-y-auto" Elevation="0">
    <MudTreeView Items="@TreeItems" Dense=true >
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                    <MudCheckBox T="bool?" Checked="@(context.HasPartialChildSelection() ? null : context.IsChecked)" CheckedChanged="@((e) => CheckedChanged(context))"></MudCheckBox>
                    <MudText>@context.Text</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>
    <div style="width: 100%">

   @*  <MudText Typo="@Typo.subtitle1"> selected items: @GetSelected(),  @slecteduserid</MudText> *@
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.AppRegistration" Color="Color.Primary" OnClick="updatemenurights"
                   Class="ml-auto"  FullWidth="true">Update User Rights</MudButton>
    </div>
</MudPaper>
@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    [CascadingParameter]
    public EventCallback<NotifyMainLayout> _notifyMainLayout { get; set; }
    NotifyMainLayout nml = new NotifyMainLayout();

    int loginid = 0;
    private HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();
    private ListItems _selectedItem { get; set; }
    string slecteduserid = "0";
    public List<ListItems> UserList { get; set; }


    protected void CheckedChanged(TreeItemData item)
    {
        item.IsChecked = !item.IsChecked;
        // checked status on any child items should mirrror this parent item
        if (item.HasChild)
        {
            foreach (TreeItemData child in item.TreeItems)
            {
                child.IsChecked = item.IsChecked;
            }
        }
        // if there's a parent and all children are checked/unchecked, parent should match
        if (item.Parent != null)
        {
            item.Parent.IsChecked = !item.Parent.TreeItems.Any(i => !i.IsChecked);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var identity = authState.User.Identity as ClaimsIdentity;
        if (identity.IsAuthenticated)
        {
            var nameIdentifierClaim = identity?.FindFirst(ClaimTypes.NameIdentifier);
            loginid = Convert.ToInt32(nameIdentifierClaim.Value);

            nml.SpinnerVisible = true;
            await _notifyMainLayout.InvokeAsync(nml);

            var userlist = await _adduser_rights.GetUserList(new CommanRequest { UserID = 2 });
            UserList = userlist.Data;
            //await  lodemenuformate(loginid);

            nml.SpinnerVisible = false;
            await _notifyMainLayout.InvokeAsync(nml);

        }
        else
        {
            _navigationManager.NavigateTo("/", true);
        }
    }
    public async Task lodemenuformate(int id)
    {

        var menuformet =await _adduser_rights.GetMenuListFormate(new CommanRequest { UserID = id });

        if (menuformet.Data.Any())
        {
            //var orderdlist = menuformet.Data.OrderBy(x => x.DisplaySrNo);
            foreach (var item in menuformet.Data)
            {
                if (item.ChildMenuItems.Any())
                {

                    TreeItemData treeitemwithchild = new TreeItemData(item.MenuName, item.MenuItemId);
                    foreach (var childitem in item.ChildMenuItems)
                    {
                        if (childitem.ChildMenuItems.Any())
                        {

                            TreeItemData treeitemwithchildchild = new TreeItemData(childitem.MenuName, childitem.MenuItemId);
                            treeitemwithchildchild.Parent = treeitemwithchild;

                            foreach (var childchilditem in childitem.ChildMenuItems)
                            {
                                treeitemwithchildchild.AddChild(childchilditem.MenuName, childchilditem.MenuItemId);
                                TreeItems.Add(treeitemwithchild);

                            }

                        }
                        else
                        {

                            treeitemwithchild.AddChild(childitem.MenuName, childitem.MenuItemId);
                            TreeItems.Add(treeitemwithchild);

                        }
                    }


                }
                else
                {

                    TreeItems.Add(new TreeItemData(item.MenuName, item.MenuItemId));

                }

            }
        }




    }

    public string GetSelected()
    {
        string seleteditem="";
        if (TreeItems != null && TreeItems.Count > 0)
        {
            foreach (var item in TreeItems)
            {
                if(item.IsChecked)
                    seleteditem = seleteditem+"," + item.Value;
                if(item.HasChild)
                {
                    //added for if parent menu has child if not the partial selection gon
                    seleteditem = seleteditem + "," + item.Value;

                    foreach(var childitem in item.TreeItems)
                    {
                        if(childitem.IsChecked)
                        {
                            seleteditem = seleteditem + "," + childitem.Value;
                        }

                    }

                }


            }
        }


        return seleteditem;
    }

    public void clear()
    {

        if (TreeItems != null && TreeItems.Count > 0)
        {
            foreach (var item in TreeItems)
            {

                item.IsChecked=false;
                if (item.HasChild)
                {
                    foreach (var childitem in item.TreeItems)
                    {
                        childitem.IsChecked = false;

                    }

                }


            }
        }



    }
    public void remove()
    {

        if (TreeItems != null && TreeItems.Count > 0)
        {
            foreach (var item in TreeItems)
            {

                TreeItems.Remove(item);


            }
        }



    }
    public  ListItems selecteduser
    {
        get
        {
            return _selectedItem;
        }
        set
        {
            _selectedItem = value;
            fillMenuByUser(value);


        }


    }
    private async Task fillMenuByUser(ListItems val)
    {
        nml.SpinnerVisible = true;
        await _notifyMainLayout.InvokeAsync(nml);
        slecteduserid = val.Value;
        TreeItems.Clear();
        await lodemenuformate(Convert.ToInt32(String.IsNullOrEmpty(val.Value) ? "0" : val.Value));
        //clear();

        var asignedmenulist = await _adduser_rights.GetMenuListByRole(new CommanRequest { UserID = (Convert.ToInt32(String.IsNullOrEmpty(val.Value) ? "0" : val.Value)) });



        if (TreeItems != null && TreeItems.Count > 0)
        {

            foreach (var item in TreeItems)
            {
                var asignedmenuitem = asignedmenulist.Data.Where(x => x.MenuItemId == Convert.ToInt32(item.Value)).FirstOrDefault();
                if (asignedmenuitem!=null )
                {
                    item.IsChecked = true;
                }


                if (item.HasChild && asignedmenuitem != null)
                {
                    foreach (var childitem in item.TreeItems)
                    {

                        var asignedmenuitemchild = asignedmenuitem.ChildMenuItems.Where(x => x.MenuItemId == Convert.ToInt32(childitem.Value)).FirstOrDefault();
                        if (asignedmenuitemchild != null)
                        {
                            childitem.IsChecked = true;
                        }
                    }

                }


            }
        }

        StateHasChanged();
        nml.SpinnerVisible = false;
        await _notifyMainLayout.InvokeAsync(nml);
        //fil the menu
    }
    private async Task<IEnumerable<ListItems>> LodefilterList(string value)
    {
        if (string.IsNullOrEmpty(value))
            return UserList;
        return UserList.Where(x => x.Text.Contains(value, StringComparison.InvariantCultureIgnoreCase));

    }
    private async Task updatemenurights()
    {
        string selectedmenuids = GetSelected();
        if (!String.IsNullOrEmpty(slecteduserid) && slecteduserid!="0")
        {
            nml.SpinnerVisible = true;
            await _notifyMainLayout.InvokeAsync(nml);
            var responce = await _adduser_rights.UpdateMenuByID(new CommanRequest { UserID = Convert.ToInt32(slecteduserid), ids = selectedmenuids,SubRoleId=loginid });
            if (responce.Status==true)
            {
                _toastService.ShowSuccess(responce.Data.Msg);

            }
            else
            {
                _toastService.ShowSuccess(responce.Message.FirstOrDefault());
            }
            nml.SpinnerVisible = false;
            await _notifyMainLayout.InvokeAsync(nml);
        }
        else
        {
            _toastService.ShowError("!Please Select User");
        }
        

       

    }
  
}
